NAME
       json - JSON encoder/decoder

DESCRIPTION
       This module provides a simple JSON encoder/decoder according to RFC 7159.

EXPORTS
       encode(Term) -> JSON

              Term = term()
              JSON = iolist()

              Encode Erlang term into JSON value.

              +------------+------------+
              |Erlang term | JSON value |
              +------------+------------+
              |atom        | string     |
              |binary      | string     |
              |false       | false      |
              |float       | float      |
              |integer     | integer    |
              |list        | array      |
              |map         | object     |
              |null        | null       |
              |proplist    | object     |
              |true        | true       |
              +------------+------------+

       decode(JSON) -> {ok, Term, Rest} | {error, Reason}

              JSON = binary() | list()
              Term = term()
              Rest = binary()
              Reason = atom()

              Decode JSON value to Erlang term.
              Characters left after reading the value are returned as Rest.

              +-----------+-------------+
              |JSON value | Erlang term |
              +-----------+-------------+
              |array      | list        |
              |false      | false       |
              |float      | float       |
              |integer    | integer     |
              |null       | null        |
              |object     | map         |
              |string     | binary      |
              |true       | true        |
              +-----------+-------------+


QUIRKS
       Decoder is more lenient than the standard in the following:

              o any character =< 32 is considered whitespace

              o commas are not enforced in arrays, and treated as any
	        other whitespace:
                {ok, [1,2,3,4], _} = json:decode(<<"[,,,1  2,3, ,4]">>).
                {ok, [], _} = json:decode(<<"[,, ,,]">>).

              o whitespace is optional on token boundaries:
                {ok, ["hello", true, 1, null], _} =
		    json:decode(<<"[\"hello\"true1null]">>).

              o leading zeros for numbers are supported:
                {ok, 4, _} = json:decode(<<"0004">>).

              o any JSON value can be at the top level

              o leaving bytes after the first value at the top level is OK:
                {ok, #{}, <<"[]">>} = json:decode(<<"{}[]">>).

       Mind that, according to RFC 7159, key order in objects is not preserved:

              An object is an unordered collection of zero or more
	      name/value pairs, where a name is a string and a value
	      is a string, number, boolean, null, object, or array.

SEE ALSO
       RFC 7159
